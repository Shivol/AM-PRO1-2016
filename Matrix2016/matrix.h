//
// Лабораторная №7. Двумерные массивы.
//
#pragma once

#include <iomanip>
#include <assert.h>

// максимальное количество строк
const size_t MAX_ROWS=10;
// максимальное количество столбцов
const size_t MAX_COLS=10;
// пользовательский тип матрицы
typedef double matrix[MAX_ROWS][MAX_COLS];



// Функция чтения матрицы вещественных чисел из текстового файла с заданным именем.
// Автоматическое выделение памяти.
// Входные параметры:
//      fname - имя файла.
// Выходные параметры:
//      a - указатель на начало массива;
//      rows - количество строк матрицы а;
//      cols - количество количество столбцов матрицы а.
// Если в файле оказывается меньше элементов, чем указанно,
// генерируется исключение char*.
void read_from_text(const char *fname, matrix a, size_t &rows, size_t &cols);

// Функция чтения матрицы вещественных чисел из заданного текстового файла.
// Автоматическое выделение памяти.
// Входные параметры:
//      fin - файловый поток ввода.
// Выходные параметры:
//      a - указатель на начало массива;
//      rows - количество строк матрицы а;
//      cols - количество количество столбцов матрицы а.
// Если в файле оказывается меньше элементов, чем указанно,
// генерируется исключение char*.
void read_from_text(std::ifstream &fin, matrix a, size_t &rows, size_t &cols);

// Функция чтения матрицы вещественных чисел из текстового файла с заданным именем.
// Динамическое выделение памяти.
// Входные параметры:
//     fname - имя файла.
// Выходные параметры:
//     a - указатель на начало массива;
//     rows - количество строк;
//     cols - количество количество столбцов.
// Если в файле оказывается меньше элементов, чем указанно,
// генерируется исключение char*.
void read_from_text(const char *fname, double **&a, size_t &rows, size_t &cols);

// Функция чтения матрицы вещественных чисел из заданного текстового файла.
// Динамическое выделение памяти.
// Входные параметры:
//     fin - файловый поток ввода.
// Выходные параметры:
//     a - указатель на начало массива;
//     rows - количество строк матрицы а;
//     cols - количество количество столбцов матрицы а.
// Если в файле оказывается меньше элементов, чем указанно,
// генерируется исключение char*.
void read_from_text(std::ifstream &fin, double **&a, size_t &rows, size_t &cols);

// Функция освоюождения памяти, занимаемой матрицей.
// Входные параметры:
//     a - указатель на матрицу;
//     rows - количество строк матрицы а;
//     cols - количество количество столбцов матрицы а.
void delete_matrix( double ** const a, const size_t rows, const size_t cols);

// Шаблон функции вывода двумерного массива.
// Входные параметры:
//     a - указатель на начало массива;
//     rows - количество строк матрицы а;
//     cols - количество количество столбцов матрицы а.
template <typename T>
void print(const T a, const size_t rows, const size_t cols)
{
    assert(a != nullptr);
    using namespace std;

    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j)
            cout << setw(6)  // ширина поля вывода
            << fixed << setprecision(3)  // количество знаков после запятой
            << a[i][j];
        cout << endl;
    }
}

// Шаблон функции сравнения двух матриц на равенство.
// Входные параметры:
//     a, b - указатели на начало массива;
//     rows - количество строк матриц а, b;
//     cols - количество количество столбцов матриц а, b;
//     precision - точность сравнения, по умолчанию = 0.
// Возвращаемое значение:
//     true - если все элементы матриц равны.
template <typename T>
bool is_equal(const T a, const T b, const size_t rows, const size_t cols, const double precision = 0.0)
{
    assert(a != nullptr);
    assert(b != nullptr);
    if (a == b) return true;

    for (size_t i = 0; i < rows; ++i)
        for (size_t j = 0; j < cols; ++j)
            if (fabs(a[i][j] - b[i][j]) > precision)
                return false;
    return true;
}
