//
// Лабораторная работа №13. Динамические структуры данных. Списки
// test_tlist.h
//

#pragma once

#include "tlist.h"

// Определим массив-список:
// массив элемнтов tlist, каждый из которых
// указывает на следующий элемент в массиве.
// Это позволит легко проверить 
// корректность указателей в тесте.
typedef tlist *array_list;

// Функция получения массива-списка из массива значений.
// Входные параметры:
//     array - массив значений элементов списка;
//     length - количество значений.
// Возвращает массив элементов tlist.
array_list get_array_list(const tlist::datatype *array, size_t length);

// Тест для функции
// array_list get_array_list(const tlist::datatype *array, size_t length)
// Проверяет корректность структуры массива-списка и значений в списке.
bool test_get_array_list();

// Тест для функции
// tlist *find(const tlist *begin, const tlist::datatype x)
// Проверяет случаи наличия и отсутствия элементов в списке.
bool test_find();

// Тест всех функций tlist.h
bool test_tlist_full();