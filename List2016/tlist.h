//
// Лабораторная работа №13. Динамические структуры данных. Списки
// tlist.h
//
<<<<<<< HEAD
=======

>>>>>>> ad575d590d4001f30e6f206b08be2c13481b6633
#pragma once

// Узел списка:
//     tlist::datatype - тип данных списка;
<<<<<<< HEAD
//     data - данные в узле;
//     next - указатель на следующий элемент.
struct tlist {
=======
//     data - значение в узле списка;
//     next - указатель на следующий элемент.
struct tlist
{
>>>>>>> ad575d590d4001f30e6f206b08be2c13481b6633
    typedef int datatype;
    datatype data;
    tlist *next;
};

<<<<<<< HEAD
// Тип данных список
typedef tlist *list;

// Функция создания списка.
// Значения элементов вводятся с клавиатуры.
// Входные параметры:
//     n - количество элементов списка.
// Возвращает указатель на начало списка.
tlist *get_list(size_t n);

// Функция создания списка.
// Значения элементов вводятся из файла.
// Входные параметры:
//     filename - имя файла данных.
// Возвращает указатель на начало списка.
// Если не удается открыть файл, выбрасывает исключение char*.
tlist *get_list( const char *filename );

// Функция удаления списка.
// Освобождает память занимаемую элементами списка.
// Входные параметры:
//     begin - указатель на начало списка.
// Выходное значение параметра begin равено nullptr.
void delete_list( tlist *&begin );

// Вывод списка в консоль.
void print( const tlist *begin );

// Поиск элемента с заданным значением.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - искомое значение.
// Возвращает указатель на элемент с заданным значением или
// nullptr, если элемнта с таким значением в списке нет.
tlist *find(const tlist *begin, tlist::datatype x);


=======
// Функция создания списка.
// Данные вводятся с конслои.
// Входные параметры:
//     length - количество элементов списка.
// Возвращает указатель на первый элемент списка.
tlist *get_list(const size_t length);

// Функция создания списка.
// Данные вводятся из файла.
// Входные параметры:
//     filename - имя файла данных.
// Возвращает указатель на первый элемент списка.
// В случае, если не удаётся получить доступ к файлу
// выбрасывает исключение char*.
tlist *get_list(const char *filename);

// Функция удаления списка.
// Входные параметры:
//     begin - указатель на начало списка.
// Выходное значение параметра begin равно nullptr.
void delete_list(tlist *&begin);

// Функция вывода списка на консоль.
// Входные параметры:
//     begin - указатель на начало списка.
void print_list(const tlist *begin);

// Функция поиска элемента.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - искомое значение.
// Возвращает указатель на первый элемент с заданным значением или
// nullptr, если элемента с таким значение в списке нет.
tlist *find(const tlist *begin, const tlist::datatype x);
>>>>>>> ad575d590d4001f30e6f206b08be2c13481b6633
